Description: >
    This template deploys Reaction Commerce services in an existing ECS cluster.

Parameters: 

    CloudFormationVPCStackName:
      Description: Name of an existing CloudFormation stack used to create the VPC
      Type: String

    CloudFormationECSStackName:
      Description: Name of an existing CloudFormation stack used to create the ECS cluster
      Type: String

    AppName:
      Description: Application name
      Type: String

    EnvName:
      Description: Environment name
      Type: String

    ServiceName:
      Description: Service name
      Type: String

    TaskDefinitionName:
      Description: Task definition name
      Type: String

    TaskMemory: 
      Description: Memory units to allocate for the ECS task
      Type: Number
      Default: 3600

    TaskCpu: 
      Description: CPU units to allocate for the ECS task
      Type: Number
      Default: 1000

    DesiredTaskCount: 
      Description: How many instances of this task should we run across our cluster?
      Type: Number
      Default: 2

    MinTaskCount:
      Description: Minimum number of instances of this task we can run across our cluster
      Type: Number
      Default: 0

    MaxTaskCount:
      Description: Maximum number of instances of this task we can run across our cluster
      Type: Number
      Default: 3

    MaximumPercent:
      Description: Maximum percentage of tasks to run at the same time
      Type: Number
      Default: 100

    MinimumHealthyPercent:
      Description: Minimum percentage of healthy tasks to run at the same time
      Type: Number
      Default: 0

    ContainerImage:
      Description: Docker image to be used for the app container
      Type: String

    ContainerImageTag:
      Description: Tag of the Docker image to be used for the app container
      Type: String

    ContainerName:
      Description: Container name
      Type: String

    ContainerPort:
      Description: Container port
      Type: Number
      Default: 3000

    CertificateArn:
      Description: ARN for pre-created SSL certificate for names in RootDomain
      Type: String

    ALBListenerPort:
      Description: The port to register with the Application Load Balancer
      Type: String

    ALBListenerPath: 
      Description: The path to register with the Application Load Balancer
      Type: String

    ALBListenerRulePriority:
      Description: The path to register with the Application Load Balancer
      Type: String

    ALBHealthCheckPath: 
      Description: The health check path to register with the Application Load Balancer Target Group
      Type: String

    RootDomain:
      Description: DNS domain for the root URL for the Starter Kit app
      Type: String

    DNSName:
      Description: CNAME for this service within RootDomain
      Type: String

{{range $y, $x := . }}
    {{ $x.CfParamName }}:
      Description: {{ $x.CfParamDescription }}
      Type: String
{{end}}

Resources:

    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
            ServiceName: !Sub "${AppName}-${ServiceName}"
            Cluster:
              Fn::ImportValue:
                !Sub "${CloudFormationECSStackName}-ECSCluster" 
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredTaskCount
            DeploymentConfiguration:
              MaximumPercent: !Ref MaximumPercent
              MinimumHealthyPercent: !Ref MinimumHealthyPercent
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers: 
                - ContainerName: !Ref ContainerName
                  ContainerPort: !Ref ContainerPort
                  TargetGroupArn: !Ref ServiceTargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Ref TaskDefinitionName
            Memory: !Ref TaskMemory
            Cpu: !Ref TaskCpu
            ContainerDefinitions:
                - Name: !Ref ContainerName
                  Essential: true
                  Image: !Sub "${ContainerImage}:${ContainerImageTag}"
                  {{ if . }}Environment:{{range $y, $x := . }}
                    - Name: {{ $x.EnvParamName }}
                      Value: !Ref {{ $x.CfParamName }}{{ end }}{{ end }}
                  PortMappings:
                    - ContainerPort: !Ref ContainerPort
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365  

    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: !Sub "${AppName}-${ServiceName}"
            Subnets:
              Fn::Split: 
                - ","
                - Fn::ImportValue: !Sub "${CloudFormationVPCStackName}-public-subnets"
            SecurityGroups: 
                - Fn::ImportValue:
                    !Sub "${CloudFormationECSStackName}-LoadBalancerSecurityGroup" 
            Tags: 
                - Key: Name
                  Value: !Sub "${AppName}-${ServiceName}"

    LoadBalancerDefaultListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref LoadBalancer
            Port: 9999
            Protocol: HTTP
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref DefaultTargetGroup

    DefaultTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: !Sub "${ServiceName}-default-tg"
            VpcId:
              Fn::ImportValue:
                !Sub "${CloudFormationVPCStackName}-VpcId" 
            Port: 80
            Protocol: HTTP

    ServiceTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: !Sub "${ServiceName}-app-tg"
            VpcId:
              Fn::ImportValue:
                !Sub "${CloudFormationVPCStackName}-VpcId" 
            Port: !Ref ContainerPort
            Protocol: HTTP
            Matcher: 
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: !Ref ALBHealthCheckPath
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 20
            HealthyThresholdCount: 2
            UnhealthyThresholdCount: 5
            TargetGroupAttributes:
            - Key: deregistration_delay.timeout_seconds
              Value: '30'

    LoadBalancerServiceListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref LoadBalancer
            Port: !Ref ALBListenerPort
            Protocol: HTTP
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref ServiceTargetGroup

    LoadBalancerSecureServiceListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref LoadBalancer
            Port: 443
            Protocol: HTTPS
            Certificates:
                - CertificateArn: !Ref CertificateArn
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref ServiceTargetGroup
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref LoadBalancerServiceListener
            Priority: !Ref ALBListenerRulePriority
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref ALBListenerPath
            Actions:
                - TargetGroupArn: !Ref ServiceTargetGroup
                  Type: forward

    DNSRecord:
        Type: AWS::Route53::RecordSetGroup
        Properties:
          HostedZoneName: !Sub "${RootDomain}."
          Comment: Zone apex alias targeted to LoadBalancer.
          RecordSets:
          - Name: !Sub "${DNSName}.${RootDomain}."
            Type: A
            AliasTarget:
              HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
              DNSName: !GetAtt LoadBalancer.DNSName


    # This IAM Role grants the service access to register/unregister with the 
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole: 
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }

#    ServiceScalableTarget:
#        Type: "AWS::ApplicationAutoScaling::ScalableTarget"
#        Properties:
#            MaxCapacity: !Ref MaxTaskCount
#            MinCapacity: !Ref MinTaskCount
#            ResourceId: !Join
#                - /
#                - - service
#                  - Fn::ImportValue:
#                      !Sub "${CloudFormationECSStackName}-ECSCluster" 
#                  - !GetAtt Service.Name
#            RoleARN:
#              Fn::ImportValue:
#                !Sub "${CloudFormationECSStackName}-ECSAutoScalingRoleArn" 
#            ScalableDimension: ecs:service:DesiredCount
#            ServiceNamespace: ecs

#    ServiceScaleOutPolicy:
#        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
#        Properties:
#            PolicyName: ServiceScaleOutPolicy
#            PolicyType: StepScaling
#            ScalingTargetId: !Ref ServiceScalableTarget
#            StepScalingPolicyConfiguration:
#                AdjustmentType: ChangeInCapacity
#                Cooldown: 1800
#                MetricAggregationType: Average
#                StepAdjustments:
#                - MetricIntervalLowerBound: 0
#                  ScalingAdjustment: 1

#    ServiceScaleInPolicy:
#        Type : "AWS::ApplicationAutoScaling::ScalingPolicy"
#        Properties:
#            PolicyName: ServiceScaleInPolicy
#            PolicyType: StepScaling
#            ScalingTargetId: !Ref ServiceScalableTarget
#            StepScalingPolicyConfiguration:
#                AdjustmentType: ChangeInCapacity
#                Cooldown: 1800
#                MetricAggregationType: Average
#                StepAdjustments:
#                - MetricIntervalUpperBound: 0
#                  ScalingAdjustment: -1

#    CPUScaleOutAlarm:
#        Type: AWS::CloudWatch::Alarm
#        Properties:
#            AlarmName: CPU utilization greater than 90%
#            AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
#            Namespace: AWS/ECS
#            MetricName: CPUUtilization
#            Dimensions:
#            - Name: ClusterName
#              Value:
#                Fn::ImportValue:
#                  !Sub "${CloudFormationECSStackName}-ECSCluster" 
#            - Name: ServiceName
#              Value: !GetAtt Service.Name
#            Statistic: Maximum
#            Period: '60'
#            EvaluationPeriods: '3'
#            Threshold: '90'
#            ComparisonOperator: GreaterThanThreshold
#            AlarmActions:
#            - !Ref ServiceScaleOutPolicy

#    CPUScaleInAlarm:
#        Type: AWS::CloudWatch::Alarm
#        Properties:
#            AlarmName: CPU utilization less than 70%
#            AlarmDescription: Alarm if cpu utilization less than 70% of reserved cpu
#            Namespace: AWS/ECS
#            MetricName: CPUUtilization
#            Dimensions:
#            - Name: ClusterName
#              Value:
#                Fn::ImportValue:
#                  !Sub "${CloudFormationECSStackName}-ECSCluster" 
#            - Name: ServiceName
#              Value: !GetAtt Service.Name
#            Statistic: Maximum
#            Period: '60'
#            EvaluationPeriods: '10'
#            Threshold: '70'
#            ComparisonOperator: LessThanThreshold
#            AlarmActions:
#            - !Ref ServiceScaleInPolicy
